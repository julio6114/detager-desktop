<?xml version="1.0" encoding="utf-8"?>
<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  type="{NativeWindowType.LIGHTWEIGHT}"
		  creationComplete="window_initializeHandler(event)"
		  skinClass="com.detager.skins.NotificationWindowSkin"
		  systemChrome="{NativeWindowSystemChrome.NONE}"
		  closeEffect="{fadeOut}"
		  transparent="true"
		  alwaysInFront="true"
		  width="280" height="150">
	
	<fx:Script>
		<![CDATA[
			import com.detager.models.domain.Bookmark;
			import com.detager.models.domain.Tag;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import spark.components.Button;
			
			protected var queue:Vector.<ArrayCollection> = new Vector.<ArrayCollection>();
			
			[Bindable]
			protected var bookmark:Bookmark;
			
			[Bindable]
			protected var tags:String;
			
			[Bindable]
			protected var newBookmarks:ArrayCollection;
			
			[SkinPart(required="true")]
			public var closeButton:Button;
			
			protected var timer:Timer = new Timer(4000, 1);
			
			protected function window_initializeHandler(event:FlexEvent):void
			{
				var mainScreen:Screen = Screen.mainScreen;
				var screenBounds:Rectangle = mainScreen.visibleBounds;
				
				nativeWindow.x = Capabilities.screenResolutionX - this.width;
				
				if(NativeApplication.supportsDockIcon)
				{
					nativeWindow.y = screenBounds.top;
				}
				else
				{
					nativeWindow.y = screenBounds.bottom - this.height;
				}
				
				closeButton.addEventListener(MouseEvent.CLICK, function():void { close(); });
				
				timer.addEventListener(TimerEvent.TIMER, checkQueue);
				
				shiftQueue();
			}
			
			protected function checkQueue(event:TimerEvent = null):void
			{
				if (queue.length == 0)
					close();
				else
					shiftQueue();
			}
			
			protected function shiftQueue():void
			{
				if (queue.length > 0)
				{
					newBookmarks = queue.shift();
					bookmark = newBookmarks[0];
					
					tags = "";
					for each(var tag:Tag in bookmark.tags)
						tags += tag.name + ", ";

					timer.reset();
					timer.start();					
				}
			}
			
			public function addBookmarks(bookmarks:ArrayCollection):void
			{
				queue.push(bookmarks);
			}
			
			public function addAllBookmarks(bookmarksQueue:Vector.<ArrayCollection>):void
			{
				for each(var bookmarks:ArrayCollection in bookmarksQueue)
				{
					queue.push(bookmarks);
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:Fade id="fadeOut" alphaFrom="1.0" alphaTo="0.0" duration="800" />
		<mx:DateFormatter id="dateFormatter" formatString="EEE DD/MM H:N" />
	</fx:Declarations>
	
	
	<s:VGroup left="10" top="10" right="10" bottom="10" gap="10">
		
		<s:HGroup width="100%" verticalAlign="middle">
			<s:RichText id="txtTitle" text="{bookmark.title}" width="100%" fontSize="12"
						fontWeight="bold" useHandCursor="true" buttonMode="true" maxDisplayedLines="1" />
		</s:HGroup>
		
		<s:HGroup width="100%">
			<s:Label text="Desc:" />
			<s:Label text="{bookmark.description != null ? bookmark.description : ''}" width="100%" maxDisplayedLines="2" />
		</s:HGroup>
		
		<s:HGroup width="100%">
			<s:Label text="Tags:" />
			<s:Label text="{tags != null ? tags : ''}" width="100%" maxDisplayedLines="3" />
		</s:HGroup>
		
		<s:HGroup width="100%" gap="3">
			<s:Label text="by:" />
			<s:Label text="{bookmark.ownerUsername}," textDecoration="underline" useHandCursor="true" buttonMode="true" />
			<s:Label text="{dateFormatter.format(bookmark.entryDate)}" />
		</s:HGroup>
		
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="#999999" />
			</s:stroke>
		</s:Line>
		
		<s:RichText text="New bookmarks #: {newBookmarks.length}" />
		
	</s:VGroup>
	
</s:Window>
